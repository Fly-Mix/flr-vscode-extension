import * as vscode from "vscode";

export enum Names {
  generatedFileName = "r_generated.dart",
  flr = "flr",
  flrfile = "Flrfile.yaml",
  pubspec = "pubspec.yaml"
}

export enum Commands {
  init = "flr.init",
  openFile = "flr.openFile",
  refresh = "flr.refresh",
  startMonotor = "flr.startMonitor",
  stopMonitor = "flr.stopMonitor"
}

export enum ControlFlags {
  isPubspecYamlExist = "isPubspecYamlExist",
  isMonitorEnabled = "isMonitorEnabled"
}

export function switchControl(flag: ControlFlags, toValue: boolean): void {
  vscode.commands.executeCommand("setContext", flag, toValue);
}

export function registerCommandNice(
  context: vscode.ExtensionContext,
  commandId: string,
  run: (...args: any[]) => void
): void {
  context.subscriptions.push(vscode.commands.registerCommand(commandId, run));
}

export function firstWorkSpace(): vscode.Uri | undefined {
  let folders = vscode.workspace.workspaceFolders;
  if (folders && folders.length > 0) {
    return folders[0].uri;
  }
  return undefined;
}

export function distictArray<T>(value: Array<T>): Array<T> {
  return value.filter((n, i) => value.indexOf(n) === i);
}
/// remove 2.0x / 3.0x from path
export function trimScalesPathOf(item: string): string {
  return item.replace("/2.0x", "").replace("/3.0x", "");
}

export class SupportedFormat {
  static images = [
    ".png",
    ".jpg",
    ".jpeg",
    ".gif",
    ".webp",
    ".icon",
    ".bmp",
    ".wbmp"
  ];

  static svg = [".svg"];

  static txt = [".txt", ".json", ".yaml", ".xml"];
}
export class Template {
  static flrfileTemplate = `# Flrfile.yaml is used to config the asset directories that needs to be scanned in current flutter project directory.
assets:
  # config the image asset directories that need to be scanned
  # supported image assets: [".png", ".jpg", ".jpeg", ".gif", ".webp", ".icon", ".bmp", ".wbmp", ".svg"]
  # config example: - lib/assets/images
  images:
    #- lib/assets/images
  # config the text asset directories that need to be scanned
  # supported text assets: [".txt", ".json", ".yaml", ".xml"]
  # config example: - lib/assets/texts
  texts:
    #- lib/assets/texts
`;
  static resourceFileHeader(packageName: string): string {
    return `//
// This is a generated file, do not edit!",
// Generated by flr vscode extension, see https://github.com/Fly-Mix/flr-vscode-extension",
//

// ignore: unused_import
import 'package:flutter/widgets.dart';
// ignore: unused_import
import 'package:flutter/services.dart' show rootBundle;
// ignore: unused_import
import 'package:flutter_svg/flutter_svg.dart';
// ignore: unused_import
import 'package:r_dart_library/asset_svg.dart';

/// This \`R\` class is generated and contains references to static resources.
class R {
  /// package name: moxibustion_instrument
  static const package = "${packageName}";
}\n`;
  }

  static textAssetOf(
    path: string,
    filename: string,
    packageName: string
  ): string {
    return this.assetGenerator(
      path,
      `static Future<String> ${filename}() {
    var assetFullPath = "packages/${packageName}${path}";
    var str = rootBundle.loadString(assetFullPath);
    return str;
  }`
    );
  }

  static svgAssetOf(
    path: string,
    filename: string,
    packageName: string
  ): string {
    return this.assetGenerator(
      path,
      `static AssetSvg ${filename}({@required double w, @required double h}) {
    assert(w != null && h != null);
    final assetFullPath = "packages/${packageName}${path}";
    final imageProvider = AssetSvg(assetFullPath, width: w, height: h);
    return imageProvider;
  }`
    );
  }

  static imageAssetOf(path: string, filename: string): string {
    return this.assetGenerator(
      path,
      `static const ${filename} = AssetImage("${path}", package: R.package);`
    );
  }

  private static assetGenerator(path: string, customContent: string): string {
    return `\n  /// asset: ${path}
  // ignore: non_constant_identifier_names
  ${customContent}`;
  }

  static textBlockHeader(): string {
    return this.resourceBlockHeader("R.Json", "R_Text");
  }

  static imagesBlockHeader(): string {
    return this.resourceBlockHeader("R.Image", "R_Image");
  }

  static svgBlockHeader(): string {
    return this.resourceBlockHeader("R.SVG", "R_SVG");
  }

  private static resourceBlockHeader(origin: string, sulution: string): string {
    return `\n/// Because dart does not support nested class, so use class \`${sulution}\` to replace nested class \`${origin}\`
// ignore: camel_case_types
class ${sulution} {`;
  }
}
